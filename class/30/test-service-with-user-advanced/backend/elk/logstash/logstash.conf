input {
    jdbc {

    # 중복 저장의 문제!!
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://database:3306/mydocker03"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *"
        # statement => "select * from product"

    # 새로운 조회는 소수점까지 조회되고, 저장되어있는 기준 업데이트 시간은 잘려서 저장 -> 같은 데이터가 계속 저장되는 문제!! timestamp대신 numeric사용
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://database:3306/mydocker03"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *"
        # use_column_value => true
        # tracking_column => "updatedat" #대문자 인식 못함 소문자만
        # tracking_column_type => "timestamp"
        # last_run_metadata_path => "./updatedata.txt" #가장 마지막으로 실행된 값만 저장, 따라서 updatedat은 정렬이 되어있어야한다!
        # statement => "select id, name, price, updatedat from product where updatedat > :sql_last_value order by updatedat asc" # : 은 변수값을 의미

        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://database:3306/mydocker03"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => "updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./updatedata.txt"
        #unix_timestamp 적용하면 변수명이 변형되서 인식을 못함. as 키워드 써서 다시 변수명 제대로 해준다.
        statement => "select id, name, price, unix_timestamp(updatedat) as updatedat from product where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"
    }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "myproduct03" #컬랙션은 자동생성 해줌.

    }
}